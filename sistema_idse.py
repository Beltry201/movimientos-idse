#!/usr/bin/env python3
"""
Sistema IDSE - IMSS Desde Su Empresa
=====================================

Interfaz unificada para procesar movimientos IDSE del IMSS.
Consolida todas las funcionalidades de demo y testing en una sola aplicaci√≥n.
"""

import json
import sys
import os
from pathlib import Path
from typing import Dict, Any, List

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

# Importar componentes del sistema
from src.services.processor_service import ProcessorService
from src.services.file_generator_service import FileGeneratorService
from src.validators.movimiento_validator import MovimientoValidator
from src.config.constants import *
from src.utils.date_utils import *
from src.utils.format_utils import *
from loguru import logger

class SistemaIDSE:
    """Clase principal del Sistema IDSE"""
    
    def __init__(self):
        """Inicializar el sistema"""
        self.processor = ProcessorService()
        self.file_generator = FileGeneratorService()
        
        # Configurar logging
        logger.remove()
        logger.add(sys.stderr, level="INFO", format="{time} | {level} | {message}")
        
        # Crear directorios necesarios
        os.makedirs("output", exist_ok=True)
        os.makedirs("logs", exist_ok=True)
    
    def mostrar_banner(self):
        """Mostrar banner del sistema"""
        print("üöÄ Sistema IDSE - IMSS Desde Su Empresa")
        print("=" * 50)
        print("üìã Versi√≥n: 1.0.0")
        print("üè¢ Procesamiento de movimientos IMSS")
        print("üìÑ Generaci√≥n de archivos IDSE")
        print("=" * 50)
    
    def mostrar_menu_principal(self):
        """Mostrar men√∫ principal"""
        print("\nüìã MEN√ö PRINCIPAL")
        print("=" * 30)
        print("1. üìä Procesar archivo JSON")
        print("2. üîç Ejecutar validaciones de ejemplo")
        print("3. üìÅ Generar archivos IDSE de ejemplo")
        print("4. üß™ Ejecutar tests del sistema")
        print("5. üìñ Mostrar informaci√≥n del sistema")
        print("6. üßπ Limpiar archivos generados")
        print("0. ‚ùå Salir")
        print("=" * 30)
    
    def procesar_archivo_json(self):
        """Procesar archivo JSON ingresado por el usuario"""
        print("\nüìä PROCESAR ARCHIVO JSON")
        print("-" * 30)
        
        # Solicitar ruta del archivo
        ruta_archivo = input("üìÇ Ingrese la ruta del archivo JSON: ").strip()
        
        if not ruta_archivo:
            print("‚ùå No se ingres√≥ una ruta v√°lida")
            return
        
        if not os.path.exists(ruta_archivo):
            print(f"‚ùå El archivo {ruta_archivo} no existe")
            return
        
        try:
            # Leer y procesar archivo
            with open(ruta_archivo, 'r', encoding='utf-8') as f:
                contenido = f.read()
            
            resultado = self.processor.procesar_archivo_json(contenido)
            
            # Mostrar resultados
            self.mostrar_resultados_procesamiento(resultado)
            
        except Exception as e:
            print(f"‚ùå Error procesando archivo: {e}")
            logger.exception("Error en procesamiento de archivo")
    
    def ejecutar_validaciones_ejemplo(self):
        """Ejecutar validaciones con datos de ejemplo"""
        print("\nüîç VALIDACIONES DE EJEMPLO")
        print("-" * 30)
        
        # Mostrar reglas de validaci√≥n
        print("üìã REGLAS DE VALIDACI√ìN:")
        print("   ‚Ä¢ SBC m√°ximo: $2089.12")
        print("   ‚Ä¢ NSS longitud: 11 d√≠gitos")
        print("   ‚Ä¢ CURP longitud: 18 caracteres")
        print("   ‚Ä¢ Registro patronal: 11 caracteres")
        print("   ‚Ä¢ L√≠nea IDSE: 44 caracteres")
        
        print("\nüìù TIPOS DE MOVIMIENTO:")
        for tipo in TipoMovimiento:
            codigo = CodigoTipoMovimiento[tipo.value].value
            print(f"   ‚Ä¢ {tipo.value}: {codigo}")
        
        print("\nüè∑Ô∏è MOTIVOS DE BAJA:")
        for motivo in MotivoBaja:
            codigo = CodigoMotivoBaja[motivo.value].value
            print(f"   ‚Ä¢ {motivo.value}: {codigo}")
        
        # Mostrar formato IDSE
        print("\nüìÑ FORMATO IDSE")
        print("=" * 30)
        print("Cada l√≠nea tiene exactamente 44 caracteres:")
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ Registro    ‚îÇ NSS         ‚îÇTipo‚îÇRaz√≥n‚îÇ Fecha  ‚îÇ    SBC     ‚îÇ")
        print("‚îÇ Patronal    ‚îÇ Empleado    ‚îÇMov.‚îÇSal. ‚îÇDDMMYYYY‚îÇ  (centavos)‚îÇ")
        print("‚îÇ   (11)      ‚îÇ   (11)      ‚îÇ(2) ‚îÇ (2) ‚îÇ  (8)   ‚îÇ   (10)     ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        ejemplo_linea = "B5510768108098765432100700010320230000112000"
        print(f"Ejemplo de l√≠nea IDSE:")
        print(f"'{ejemplo_linea}'")
        print(f"Longitud: {len(ejemplo_linea)} caracteres")
        
        # Desglose del ejemplo
        print("\nDesglose:")
        print(f"  Registro Patronal: '{ejemplo_linea[:11]}'")
        print(f"  NSS: '{ejemplo_linea[11:22]}'")
        print(f"  Tipo Movimiento: '{ejemplo_linea[22:24]}' (07 = alta)")
        print(f"  Raz√≥n Salida: '{ejemplo_linea[24:26]}' (00 = no aplica)")
        print(f"  Fecha: '{ejemplo_linea[26:34]}' (05/03/2023)")
        print(f"  SBC: '{ejemplo_linea[34:44]}' (112000 centavos = $1,120.00)")
    
    def generar_archivos_ejemplo(self):
        """Generar archivos IDSE con datos de ejemplo"""
        print("\nüìÅ GENERAR ARCHIVOS IDSE DE EJEMPLO")
        print("-" * 40)
        
        # Cargar datos de ejemplo
        archivo_ejemplo = "examples/input-ejemplo.json"
        
        if not os.path.exists(archivo_ejemplo):
            print(f"‚ùå No se encontr√≥ el archivo de ejemplo: {archivo_ejemplo}")
            return
        
        try:
            # Leer datos de ejemplo
            with open(archivo_ejemplo, 'r', encoding='utf-8') as f:
                contenido = f.read()
            
            # Procesar datos
            resultado = self.processor.procesar_archivo_json(contenido)
            
            # Mostrar resultados
            self.mostrar_resultados_procesamiento(resultado)
            
        except Exception as e:
            print(f"‚ùå Error generando archivos de ejemplo: {e}")
            logger.exception("Error en generaci√≥n de archivos de ejemplo")
    

    
    def ejecutar_tests_sistema(self):
        """Ejecutar tests del sistema"""
        print("\nüß™ TESTS DEL SISTEMA")
        print("-" * 20)
        
        print("üîç Ejecutando tests unitarios...")
        
        try:
            # Ejecutar tests con pytest
            import subprocess
            resultado = subprocess.run([
                "python", "-m", "pytest", "tests/", "-v"
            ], capture_output=True, text=True)
            
            if resultado.returncode == 0:
                print("‚úÖ Tests ejecutados exitosamente")
                print(resultado.stdout)
            else:
                print("‚ùå Algunos tests fallaron")
                print(resultado.stdout)
                print(resultado.stderr)
                
        except Exception as e:
            print(f"‚ùå Error ejecutando tests: {e}")
    
    def mostrar_informacion_sistema(self):
        """Mostrar informaci√≥n del sistema"""
        print("\nüìñ INFORMACI√ìN DEL SISTEMA")
        print("=" * 30)
        
        print("üöÄ Sistema IDSE - IMSS Desde Su Empresa")
        print("üìã Versi√≥n: 1.0.0")
        print("üè¢ Prop√≥sito: Procesamiento de movimientos IMSS")
        print("üìÑ Funcionalidad: Generaci√≥n de archivos IDSE")
        
        print("\nüìÅ Estructura del proyecto:")
        print("   ‚Ä¢ src/ - C√≥digo fuente del sistema")
        print("   ‚Ä¢ examples/ - Archivos de ejemplo")
        print("   ‚Ä¢ tests/ - Tests unitarios")
        print("   ‚Ä¢ output/ - Archivos IDSE generados")
        print("   ‚Ä¢ logs/ - Archivos de log")
        
        print("\nüîß Tecnolog√≠as utilizadas:")
        print("   ‚Ä¢ Python 3.x")
        print("   ‚Ä¢ Pydantic v1.10.2")
        print("   ‚Ä¢ Loguru 0.7.0")
        print("   ‚Ä¢ pytest 7.3.1")
        
        print("\nüìã Funcionalidades principales:")
        print("   ‚Ä¢ Validaci√≥n de movimientos IMSS")
        print("   ‚Ä¢ Generaci√≥n de archivos IDSE")
        print("   ‚Ä¢ Tests automatizados")
        print("   ‚Ä¢ Logging detallado")
        
        # Mostrar archivos en output
        output_dir = "output"
        if os.path.exists(output_dir):
            archivos = [f for f in os.listdir(output_dir) if f.endswith('.txt')]
            if archivos:
                print(f"\nüìÅ Archivos IDSE generados ({len(archivos)}):")
                for archivo in archivos[:5]:  # Mostrar solo los primeros 5
                    ruta = os.path.join(output_dir, archivo)
                    tama√±o = os.path.getsize(ruta)
                    print(f"   ‚Ä¢ {archivo} ({tama√±o} bytes)")
                if len(archivos) > 5:
                    print(f"   ... y {len(archivos) - 5} archivos m√°s")
    
    def limpiar_archivos_generados(self):
        """Limpiar archivos generados"""
        print("\nüßπ LIMPIAR ARCHIVOS GENERADOS")
        print("-" * 30)
        
        # Limpiar directorio output
        output_dir = "output"
        if os.path.exists(output_dir):
            archivos = [f for f in os.listdir(output_dir) if f.endswith('.txt')]
            if archivos:
                for archivo in archivos:
                    ruta = os.path.join(output_dir, archivo)
                    os.remove(ruta)
                    print(f"üóëÔ∏è  Eliminado: {archivo}")
                print(f"‚úÖ Se eliminaron {len(archivos)} archivos")
            else:
                print("üìÅ No hay archivos para eliminar")
        else:
            print("üìÅ El directorio output no existe")
        
        # Limpiar archivos __pycache__
        import subprocess
        try:
            subprocess.run([
                "find", ".", "-name", "__pycache__", "-type", "d", 
                "-not", "-path", "./venv/*", "-exec", "rm", "-rf", "{}", "+"
            ], capture_output=True)
            print("üßπ Archivos __pycache__ eliminados")
        except:
            print("‚ö†Ô∏è  No se pudieron eliminar archivos __pycache__")
    
    def mostrar_resultados_procesamiento(self, resultado: Dict[str, Any]):
        """Mostrar resultados del procesamiento"""
        print("\n‚úÖ PROCESAMIENTO COMPLETADO")
        print("=" * 50)
        
        # Mostrar estad√≠sticas
        resumen = resultado.get('resumen', {})
        print(f"üìä Estad√≠sticas:")
        print(f"   ‚Ä¢ Empresas procesadas: {resumen.get('total_empresas', 0)}")
        print(f"   ‚Ä¢ Movimientos totales: {resumen.get('total_movimientos', 0)}")
        print(f"   ‚Ä¢ Movimientos v√°lidos: {resumen.get('movimientos_validos', 0)}")
        print(f"   ‚Ä¢ Movimientos inv√°lidos: {resumen.get('movimientos_invalidos', 0)}")
        print(f"   ‚Ä¢ Archivos generados: {resumen.get('archivos_a_generar', 0)}")
        
        # Mostrar errores detallados si los hay
        errores = resultado.get('errores', [])
        if errores:
            print(f"\n‚ùå ERRORES DE VALIDACI√ìN DETECTADOS:")
            print("-" * 50)
            
            # Agrupar errores por empresa
            errores_por_empresa = {}
            for error in errores:
                empresa = error.get('empresa', 'DESCONOCIDA')
                if empresa not in errores_por_empresa:
                    errores_por_empresa[empresa] = []
                errores_por_empresa[empresa].append(error)
            
            for empresa, errores_empresa in errores_por_empresa.items():
                print(f"\nüè¢ Empresa: {empresa}")
                for error in errores_empresa:
                    tipo = error.get('tipo', 'error_desconocido')
                    mensaje = error.get('mensaje', 'Error sin descripci√≥n')
                    campo = error.get('campo', 'campo_desconocido')
                    valor = error.get('valor', 'valor_desconocido')
                    mov_idx = error.get('movimiento_idx', 'N/A')
                    
                    print(f"   üìã Movimiento {mov_idx}:")
                    print(f"      ‚ùå Tipo: {tipo}")
                    print(f"      üìù Campo: {campo}")
                    print(f"      üíæ Valor: {valor}")
                    print(f"      ‚ö†Ô∏è  Error: {mensaje}")
                    print()
        
        # Mostrar archivos generados
        archivos = resultado.get('archivos', [])
        if archivos:
            print(f"\nüìÅ Archivos IDSE generados:")
            for archivo in archivos:
                print(f"   ‚Ä¢ {archivo['nombre']}")
                print(f"     - Tipo: {archivo['tipo']}")
                print(f"     - Periodo: {archivo['periodo']}")
                print(f"     - Registro Patronal: {archivo['registro_patronal']}")
                print(f"     - Movimientos: {archivo['cantidad_movimientos']}")
                print(f"     - Tama√±o: {archivo['tama√±o_bytes']} bytes")
        
        # Verificar archivos en disco
        output_dir = "output"
        if os.path.exists(output_dir):
            archivos_disco = [f for f in os.listdir(output_dir) if f.endswith('.txt')]
            if archivos_disco:
                print(f"\nüíæ Archivos en disco ({output_dir}/):")
                for archivo in archivos_disco:
                    ruta_completa = os.path.join(output_dir, archivo)
                    tama√±o = os.path.getsize(ruta_completa)
                    print(f"   ‚Ä¢ {archivo} ({tama√±o} bytes)")
    
    def ejecutar(self):
        """Ejecutar el sistema principal"""
        self.mostrar_banner()
        
        while True:
            try:
                self.mostrar_menu_principal()
                opcion = input("\nüî¢ Seleccione una opci√≥n: ").strip()
                
                if opcion == "1":
                    self.procesar_archivo_json()
                elif opcion == "2":
                    self.ejecutar_validaciones_ejemplo()
                elif opcion == "3":
                    self.generar_archivos_ejemplo()
                elif opcion == "4":
                    self.ejecutar_tests_sistema()
                elif opcion == "5":
                    self.mostrar_informacion_sistema()
                elif opcion == "6":
                    self.limpiar_archivos_generados()
                elif opcion == "0":
                    print("\nüëã ¬°Gracias por usar el Sistema IDSE!")
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
                
                input("\n‚è∏Ô∏è  Presione Enter para continuar...")
                
            except KeyboardInterrupt:
                print("\n\nüëã ¬°Hasta luego!")
                break
            except Exception as e:
                print(f"‚ùå Error inesperado: {e}")
                logger.exception("Error inesperado en el sistema")

def main():
    """Funci√≥n principal"""
    try:
        sistema = SistemaIDSE()
        sistema.ejecutar()
    except Exception as e:
        print(f"‚ùå Error iniciando el sistema: {e}")
        logger.exception("Error cr√≠tico en el sistema")

if __name__ == "__main__":
    main() 